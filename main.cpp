/*
Autor: Nelson Andres Acuña Cambronero
Cédula: 116620490
Fecha inicio: 13/Octubre/2025
Hora inicio: 21:38
Fecha de finalización: -/-/2025 (Aún sin definir)
Hora de finalización: 00:00 (Aún sin definir)

*******************SISTEMA DE BIBLIOTECA C++*********************
Su función principal es gestionar los libros de una biblioteca
escolar. Se administrará un catálogo de libros y un registro de
préstamos de libros. Toda esta infomación se almacenará en un
archivo de texto (.txt).

Se validará de manera robusta la integridad de los datos ingresados
por el usuario al igual que el manejo de excepciones en caso de ser
necesario por algún dato mal ingresado o incorrecto.

El usuario podrá:
    1. Ingresar registro al catálogo.
    2. Mostrar catálogo.
    3. Registrar nuevo préstamo.
    4. Devolver libro.
    5. Ver historial de préstamos.
    6. Salir.

******************REFERENCIAS BIBLIOGRÁFICAS************************
https://ss64.com/tools/locale.html
https://cplusplus.com/reference/clocale/setlocale/?kw=setLocale
https://en.cppreference.com/w/cpp/chrono/c/ctime
https://cplusplus.com/reference/sstream/stringstream/?kw=stringstream
https://cplusplus.com/reference/cstddef/size_t/
https://cplusplus.com/reference/string/string/insert/
https://en.cppreference.com/w/cpp/string/basic_string_view/npos
https://en.cppreference.com/w/cpp/thread/thread/thread.html
https://en.cppreference.com/w/cpp/header/chrono.html
*/

#include <iostream>
#include <locale.h>//Visualización de acentos en consola
#include <iomanip>//Parte de la librería de entrada/salida, utilizado para el setfill() y setw()
#include <conio.h>//Para uso del getch()
#include <vector>//Para trabajar con vectores
#include <ctime>//Para trabajar con la hora y fecha de los registros de transacciones
#include <sstream>//Para trabajar con el stringstream
#include <thread>//Para detener el ciclo del código durante una 'x' cantidad de segundos
#include <chrono>//Para efectuar los segundos al thread
#include <windows.h>//Para manejo del de acentos y caracteres especiales en entrada y salida en windows
#include <fstream> //Para manejo de archivos
#include <sstream> //Para manejo de cadenas
#include <limits> //Para los numeric_limits

using namespace std;
//Estructuras de datos
struct libro_catalogo
{
    int id_libro; //Campo numérico de máximo 6 dígitos, no letras, no espacios en blanco
    string titulo_libro; //Nombre del libro debe permitir una o más palabras
    string autor_libro; //Nombre del autor debe permitir una o más palabras
    int copias_disponibles;//No permite números negativos y debe estar en un rango de 1-9 máximo, no letras, no espacios en blanco
};

struct prestamo_libro
{
    string id_alunmo; //Valor numérico de mínimo/máximo 9 dígitos, no letras, no espacios en blanco
    int id_libro; //Campo numérico de máximo 6 dígitos, no letras, no espacios en blanco
    string nombre_alumno;//Nombre y apellidos, validar que no permita espacios en blanco
    string fecha_prestamo;//Debe generarse automáticamente y con posibilidad de modificarlo, Formato: DD/MM/YYYY

};

//Constantes de uso global
const string arch_catalogo = "catalogo.txt";
const string arch_prestamos = "prestamos.txt";

//Funciones mínimas requeridas
void cargar_catalogo();//Cargar catálogo disponible
void guardar_Catalogo();//Guardar cambios en el catálogo
void cargar_prestamos();//Cargar lista de préstamos
void guardar_prestamos();//Guardar nuevo préstamo
void mostrar_menu(int &);//Muestra el menú principal (Realizada)
void ing_reg_catalogo();//ingresar_registro_catalogo
void reg_nue_prestamo();//registrar_nuevo_prestamo
void devolver_libro();//Realizar la devolución de libros a la biblioteca
void historial_prestamos();//Ver el historial de préstamos

//Funciones Extras
void crea_arch_catalogo();
void crea_arch_prestamos();

//Funciones de validación
bool regresar_menu(bool&, string&);//Procesar Opción S/N (Realizada)

int main()
{
    //Muestra y lee los acentos de consola o desde el archivo .txt
    SetConsoleOutputCP(1252);
    SetConsoleCP(1252);
    //Constantes
    //Variables
    int opc_usuario = 0;
    string mensaje = "";
    bool salir_programa = false;

    do
    {
        try
        {
            //Mostramos el menú y recibimos la opción del usuario
            mostrar_menu(opc_usuario);
            //Si el cin entra en fallo (cin.fail()); limpiamos buffer
            if(cin.fail())
            {
                cin.clear();//Limpia el fallo del cin.fail()
                cin.ignore(100, '\n'); //Ignora el buffer restante hasta el ENTER
                throw runtime_error("Valor inválido, inténtelo de nuevo.");

            }
        }
        catch(const exception& e)
        {
            system("CLS");//Limpia o borra pantalla.
            //Imprimimos el Error a notificar al usuario
            cerr << "Error: " << e.what();
            this_thread::sleep_for(chrono::seconds(1));//Detenemos el programa para mostrar el mensaje
        }


        //Valoramos al opción elegida por el usuario y se destina a su caso respectivo
        switch(opc_usuario)
        {
        case 1://Ingresar registro al catálogo.
            crea_arch_catalogo();
            break;
        case 2://Mostrar catálogo.
            break;
        case 3://Registrar nuevo préstamo.
            crea_arch_prestamos();
            break;
        case 4://Devolver libro.
            break;
        case 5://Ver historial de préstamos.
            break;
        case 6://Salir.
            mensaje = "¿Desea salir del programa?";
            if(regresar_menu(salir_programa, mensaje))
            {
                system("CLS");//Limpia o borra pantalla.
                //Linea superior
                cout << left << setfill('=') << setw(36) << "=" << endl;// ancho pantalla 37 caracteres
                //Título
                cout << left << setfill(' ') << setw(36) << "        SALIENDO DEL SISTEMA" << endl;// ancho pantalla 36 caracteres
                //Linea inferior
                cout << left << setfill('=') << setw(36) << "=" << endl;// ancho pantalla 37 caracteres

                //Opciones del menú
                cout << left << setfill(' ') << setw(36) << "\nGracias por usar el Sistema de Biblioteca C++" << endl;
                this_thread::sleep_for(chrono::seconds(1));//Detenemos el programa para mostrar el mensaje
                cout << left << setfill(' ') << setw(36) << "\n¡Hasta pronto!" << endl;
                this_thread::sleep_for(chrono::seconds(2));//Detenemos el programa para mostrar el mensaje
            }
            else
            {
                opc_usuario = 0;
            }

            break;
        default://Dato fuera del rango
            system("CLS");//Limpia o borra pantalla.
            cout << "Opción inválida: inténtelo de nuevo." << endl;
            this_thread::sleep_for(chrono::seconds(1));//Detenemos el programa para mostrar el mensaje
            break;
        }
    }
    while(opc_usuario != 6);//Fin Do/While que valida salir del programa
    return 0;
}

//Desarrolo de funciones

/*
Muestra el Menú Principal y recibe la opción elegida
por el usuario
*/
void mostrar_menu(int &opc_usuario)
{
    system("CLS");//Limpia o borra pantalla.
    //Linea superior
    cout << left << setfill('=') << setw(37) << "=" << endl;// ancho pantalla 37 caracteres
    //Título
    cout << left << setfill(' ') << setw(37) << "      SISTEMA DE BIBLIOTECA C++" << endl;// ancho pantalla 36 caracteres
    //Linea inferior
    cout << left << setfill('=') << setw(37) << "=" << endl;// ancho pantalla 37 caracteres

    //Opciones del menú
    cout << left << setfill(' ') << setw(37) << "\n1. Ingresar registro al catálogo." << endl;
    cout << left << setfill(' ') << setw(37) << "2. Mostrar catálogo." << endl;
    cout << left << setfill(' ') << setw(37) << "3. Registrar nuevo préstamo." << endl;
    cout << left << setfill(' ') << setw(37) << "4. Devolver libro." << endl;
    cout << left << setfill(' ') << setw(37) << "5. Ver historial de préstamos." << endl;
    cout << left << setfill(' ') << setw(37) << "6. Salir." << endl;

    //Solicitamos la opción al usuario
    cout << left << "\nIngrese una opción: ";
    cin >> opc_usuario;
}//Fin de la función menu_principal
/*
Valida si el usuario desea regresar al menú principal
*/
bool regresar_menu(bool& salir_programa, string& mensaje)
{
    char opc_usuario = ' ';

    //Do/While que repite la pregunta mientra el usuario digite un valor inválido
    do
    {
        system("CLS");//Limpia o borra pantalla.
        //Realizamos la pregunta de respuesta "Sí" o "No"
        cout << "\n" + mensaje + " Digite 'S' para sí o 'N' para no." << endl;
        cout << "R/: ";
        //Validamos la respuesta del usuario media Try/Catch
        try
        {
            cin >> opc_usuario;
            //Convertimos lo ingresado por el usuario a mayúscula por cualquier duda
            opc_usuario = toupper(opc_usuario);
            if (cin.fail())
            {
                cin.clear();//Limpiamos el fallo del cin.fail()
                cin.ignore(100, '\n');//Ignora el buffer restante hasta el ENTER
                throw runtime_error("Entrada inválida: Digite 'S' para sí o 'N' para no.");
            }

            switch(opc_usuario)
            {
            case 'S':
                //Responde sí a la pregunta realizada.
                return true;
                salir_programa = true;
                break;
            case 'N':
                //Responde no a la pregunta realizada.
                return false;
                salir_programa = false;
                break;
            default://Opción por defautl
                throw runtime_error("Entrada inválida: Digite 'S' para sí o 'N' para no.");
                break;
            }

        }
        catch(const exception& e)
        {
            system("CLS");//Limpia o borra pantalla.
            //Imprimimos el error capturado
            cerr << "Error: " << e.what() << endl;
            this_thread::sleep_for(chrono::seconds(1));//Detenemos el programa para mostrar el mensaje
        }



    }
    while(opc_usuario != 'S' && opc_usuario != 'N');

    return false;
}


/*
Crea el archivo catálogo.txt y coloca los encabezados
*/
void crea_arch_catalogo()
{
    //Creamos el archivo de catálogo.txt
    ofstream archivo(arch_catalogo, ios::app | ios::binary);
    //Si el se creo correctamente
    if(archivo.is_open())
    {
        archivo.seekp(0, ios::end); //Nos mueve el puntero a la ultima ubicacion del catálogo.txt
        streampos pos_puntero = archivo.tellp();
        // Verifica si el archivo está vacío para agregar encabezados
        if (pos_puntero == 0)
        {
            //Agregamos los encabezados
            //Linea separadora superior
            archivo << left << setfill('=') << setw(132) << "=" << endl;
            //Nombres de los encabezados
            archivo << left << setfill(' ')<< setw(6) << "  ID"
                    << "|" << setw(56) << "                         TÍTULO"
                    << "|" << setw(55) << "                         AUTOR"
                    << "|" << setw(11) << "DISPONIBLES"
                    << "|" << endl;
            //Linea separadora inferior
            archivo << left << setfill('=') << setw(132) << "=" << endl;
        }
    }
}

/*
Crea el archivo prestamos.txt y coloca los encabezados
*/
void crea_arch_prestamos()
{
    //Creamos el archivo de prestamos.txt
    ofstream archivo(arch_prestamos, ios::app | ios::binary);
    //Si el se creo correctamente
    if(archivo.is_open())
    {
        archivo.seekp(0, ios::end); //Nos mueve el puntero a la ultima ubicacion del prestamos.txt
        streampos pos_puntero = archivo.tellp();
        // Verifica si el archivo está vacío para agregar encabezados
        if (pos_puntero == 0)
        {
            //Agregamos los encabezados
            //Linea separadora superior
            archivo << left << setfill('=') << setw(86) << "=" << endl;
            //Nombres de los encabezados
            archivo << left << setfill(' ')<< setw(9) << "ALUMNO ID"
                    << "|" << setw(55) << "                   NOMBRE DEL ALUMNO"
                    << "|" << setw(8) << "LIBRO ID"
                    << "|" << setw(10) << "  FECHA"
                    << "|" << endl;
            //Linea separadora inferior
            archivo << left << setfill('=') << setw(86) << "=" << endl;
        }
    }
}

